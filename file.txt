//app.py
import socket
import psutil
from flask import Flask, render_template, request
import nmap
from scapy.all import ARP, send, sniff, IP
import time
import threading
import plotly.graph_objs as go
import plotly.io as pio

app = Flask(__name__)

captured_packets = []
network_usage_data = {'upload': [], 'download': [], 'time': []}

def get_local_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(('8.8.8.8', 80))  # Connect to Google's DNS to get the local IP
    local_ip = s.getsockname()[0]
    s.close()
    return local_ip

def scan_network(subnet):
    nm = nmap.PortScanner()
    nm.scan(hosts=subnet, arguments='-sn')  # Ping scan to detect active hosts

    devices = []
    for host in nm.all_hosts():
        mac = nm[host]['addresses'].get('mac', 'N/A')
        devices.append({
            'ip': nm[host]['addresses'].get('ipv4', 'N/A'),
            'mac': mac,
            'status': nm[host]['status']['state']
        })
    return devices

def arp_spoof(target_ip, spoof_ip):
    packet = ARP(op=2, pdst=target_ip, hwdst="ff:ff:ff:ff:ff:ff", psrc=spoof_ip)
    send(packet, verbose=False)
    return f"Sent ARP spoofing packet to {target_ip}, spoofing {spoof_ip}"

def packet_sniffer(packet):
    if packet.haslayer(IP):
        src_ip = packet[IP].src
        dst_ip = packet[IP].dst
        proto = packet[IP].proto
        payload = packet.summary()
        captured_packets.append({
            'src_ip': src_ip,
            'dst_ip': dst_ip,
            'proto': proto,
            'payload': payload
        })

def monitor_network_usage():
    while True:
        net_io = psutil.net_io_counters()
        upload = net_io.bytes_sent / 1024  # Convert to KB
        download = net_io.bytes_recv / 1024  # Convert to KB
        timestamp = time.strftime('%H:%M:%S')
        
        network_usage_data['upload'].append(upload)
        network_usage_data['download'].append(download)
        network_usage_data['time'].append(timestamp)

        if len(network_usage_data['time']) > 30:
            network_usage_data['upload'].pop(0)
            network_usage_data['download'].pop(0)
            network_usage_data['time'].pop(0)
        
        time.sleep(1)

def generate_network_graph():
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=network_usage_data['time'], y=network_usage_data['upload'], mode='lines', name='Upload (KB)'))
    fig.add_trace(go.Scatter(x=network_usage_data['time'], y=network_usage_data['download'], mode='lines', name='Download (KB)'))
    fig.update_layout(title='Network Usage Over Time', xaxis_title='Time', yaxis_title='Data (KB)')
    graph_html = pio.to_html(fig, full_html=False)
    return graph_html

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/network_scan", methods=["GET", "POST"])
def network_scan():
    devices = []
    local_ip = get_local_ip()  # Get local IP address
    if request.method == "POST":
        subnet = request.form["subnet"]
        devices = scan_network(subnet)
    graph_html = generate_network_graph()
    return render_template("network_scan.html", devices=devices, local_ip=local_ip, graph_html=graph_html)

@app.route("/packet_sniffing", methods=["GET", "POST"])
def packet_sniffing():
    if request.method == "POST":
        sniff(prn=packet_sniffer, store=False, count=10)
    return render_template("packet_sniffing.html", packets=captured_packets)

if __name__ == "__main__":
    threading.Thread(target=monitor_network_usage, daemon=True).start()
    app.run(debug=True)


//base.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Network Tool{% endblock %}</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
        }
        .navbar {
            background-color: #4CAF50;
            padding: 15px;
            text-align: center;
        }
        .navbar a {
            color: white;
            text-decoration: none;
            padding: 14px 20px;
            font-size: 18px;
            margin: 0 10px;
            display: inline-block;
        }
        .navbar a:hover {
            background-color: #ddd;
            color: black;
            border-radius: 5px;
        }
        .container {
            max-width: 900px;
            margin: 30px auto;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }
        h2 {
            color: #4CAF50;
        }
        .form-group {
            margin: 20px 0;
        }
        label {
            font-weight: bold;
            color: #333;
        }
        input[type="text"], button {
            width: 100%;
            padding: 10px;
            margin-top: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }
        input[type="text"] {
            background-color: #f9f9f9;
        }
        button {
            background-color: #4CAF50;
            color: white;
            cursor: pointer;
            border: none;
        }
        button:hover {
            background-color: #45a049;
        }
        table {
            width: 100%;
            margin-top: 20px;
            border-collapse: collapse;
        }
        th, td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #4CAF50;
            color: white;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
        .message {
            background-color: #f9f9f9;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
            color: #333;
            border: 1px solid #ddd;
        }
    </style>
</head>
<body>
    <div class="navbar">
        <a href="{{ url_for('home') }}">Home</a>
        <a href="{{ url_for('network_scan') }}">Network Scanning</a>
        <a href="{{ url_for('packet_sniffing') }}">Packet Sniffing</a>
    </div>

    <div class="container">
        {% block content %}{% endblock %}
    </div>
</body>
</html>


//index.html
{% extends 'base.html' %}

{% block title %}Home{% endblock %}

{% block content %}
    <h2>Welcome to Network Tool</h2>
    <p>Choose an option from the navigation bar to get started.</p>
{% endblock %}


//network_scan.html
{% extends 'base.html' %}

{% block title %}Network Scanning{% endblock %}

{% block content %}
    <h2>Network Scanner</h2>

    <div class="form-group">
        <p><strong>Your Local IP Address:</strong> <span style="color: #4CAF50;">{{ local_ip }}</span></p>
    </div>

    <form method="POST" class="form-group">
        <label for="subnet">Enter Subnet (e.g. 192.168.1.0/24):</label>
        <input type="text" id="subnet" name="subnet" required placeholder="e.g., 192.168.1.0/24">
        <button type="submit">Scan</button>
    </form>

    {% if devices %}
        <h3>Scan Results</h3>
        <table>
            <tr>
                <th>IP Address</th>
                <th>MAC Address</th>
                <th>Status</th>
            </tr>
            {% for device in devices %}
            <tr>
                <td>{{ device.ip }}</td>
                <td>{{ device.mac }}</td>
                <td>{{ device.status }}</td>
            </tr>
            {% endfor %}
        </table>
    {% endif %}
{% endblock %}


//packet_sniffing.html
{% extends 'base.html' %}

{% block title %}Packet Sniffing{% endblock %}

{% block content %}
    <h2>Packet Sniffing</h2>
    <p>Click the button below to start capturing packets from your network.</p>

    <form method="POST" class="form-group">
        <button type="submit">Start Sniffing</button>
    </form>

    {% if packets %}
        <h3>Captured Packets</h3>
        <table>
            <tr>
                <th>Source IP</th>
                <th>Destination IP</th>
                <th>Protocol</th>
                <th>Payload</th>
            </tr>
            {% for packet in packets %}
            <tr>
                <td>{{ packet.src_ip }}</td>
                <td>{{ packet.dst_ip }}</td>
                <td>{{ packet.proto }}</td>
                <td>{{ packet.payload }}</td>
            </tr>
            {% endfor %}
        </table>
    {% endif %}
{% endblock %}

